import os
import string
import sys


SConsignFile()

Default(['build', 'tests'])

platform = DefaultEnvironment()['PLATFORM']
cachefile = 'options.%s.cache' % platform
opts = Options(cachefile)
opts.AddOptions(
    BoolOption('dbg',     'Build with debugging enabled', 0),
    BoolOption('opt',     'Build with optimizations', 0),
    BoolOption('profile', 'Build with profiling information', 0),
    BoolOption('strip',   'Strip symbols from executables', 0),
    BoolOption('distcc',  'Enable compiling with distcc', 0),
    BoolOption('nowarn',  'Disable all warnings', 0),
    BoolOption('warningsAsErrors', 'Treat warnings as errors', 0),
    BoolOption('saveTemps', 'Save temporary files, such as preprocessor output', 0),
    PathOption('boostIncludes', 'Directory containing boost header files', '/usr/local/include/boost-1_31'),
    BoolOption('withCallStack', 'Enable CallStack support', 1))

# Create base environment.
env = Environment(ENV=os.environ,
                  options=opts,
                  toolpath=[Dir('#/toolspec').abspath])

Help(opts.GenerateHelpText(env))
opts.Save(cachefile, env)

# Process platforms.

win32_defines = ['WIN32', '_WIN32', 'WIN32_LEAN_AND_MEAN', 'STRICT', 'NOMINMAX']

if env['PLATFORM'] == 'win32':
    env.Append(CXXFLAGS=['/GR', '/GX'],
               CPPDEFINES=win32_defines,
               CPPPATH=Dir('#/third-party-vc7/include'),
               LIBPATH=Dir('#/third-party-vc7/lib'),
               LIBS=['user32'])

if env['PLATFORM'] == 'cygwin':
    env.Append(CPPDEFINES = win32_defines,
               CPPPATH = ['#/third-party-cygwin/include'],
               LIBPATH = ['#/third-party-cygwin/lib'])

if env['PLATFORM'] == 'irix':
    env.Append(
        CPPPATH = string.split(os.environ['CPLUS_INCLUDE_PATH'], ':'),
        LIBPATH = string.split(os.environ['LIBRARY_PATH'], ':'),
        LIBS = ['m'])

if env.subst('$CXX') == 'cl':
    if env['dbg']:
        env.Append(CXXFLAGS=['/MDd'])
    else:
        env.Append(CXXFLAGS=['/MD'])

# If using GCC, deal with ld O(n^2) algorithm.
if env['CXX'][:3] == 'g++' and env.WhereIs('objcopy'):
    objcopy = 'objcopy --set-section-flags .debug_str=contents,debug $TARGET'
    env['CXXCOM']   = [env['CXXCOM'],   objcopy]
    env['SHCXXCOM'] = [env['SHCXXCOM'], objcopy]

# Process build options.
if env.get('dbg'):
    env.Append(CCFLAGS=['-g'])
    if not env.get('opt'):
        env.Append(CPPDEFINES=['DEBUG'])
if env.get('opt'):
    env.Append(CCFLAGS=['-O2'], CPPDEFINES=['NDEBUG'])
if env.get('profile'):
    env.Append(CCFLAGS=['-pg'], LINKFLAGS=['-pg'])
if env.get('strip'):
    env.Append(LINKFLAGS=['-g'])
if env.get('distcc'):
    env['CC']  = ['$(', 'distcc', '$)', env['CC']]
    env['CXX'] = ['$(', 'distcc', '$)', env['CXX']]
if env.get('nowarn'):
    env.Append(CCFLAGS=['-w'])
else:
    if env['CC'] == 'gcc':
        env.Append(CCFLAGS=['-Wall'])
    elif env['CXX'] == 'g++':
        env.Append(CXXFLAGS=['-Wall'])
    if env['CXX'] == 'g++':
        env.Append(CXXFLAGS=['-Wno-non-virtual-dtor'])
if env.get('warningsAsErrors'):
    if env['CC'] == 'gcc':
        env.Append(CCFLAGS=['-Werror'])
    elif env['CXX'] == 'g++':
        env.Append(CXXFLAGS=['-Werror'])
if env['saveTemps']:
    env.Append(CCFLAGS=['-save-temps'])

# Autoconfiguration.
conf = env.Configure()
if env['withCallStack']:
    if conf.CheckHeader('execinfo.h'):
        env.Append(CPPDEFINES=['HAVE_EXECINFO_H'])
    if conf.CheckHeader('unwind.h'):
        env.Append(CPPDEFINES=['HAVE_UNWIND_H'])

Export('env')

# Process subdirectories.
# XXX Due to a bug in SCons, we have to do resources last.
# The bug is that if one subscript does an Export(), it overwrites imports in
# other scripts.
SConscript(dirs = ['src', 'tests', 'resources'])

if env['PLATFORM'] == 'cygwin':
    SConscript(dirs = ['third-party-cygwin'])
