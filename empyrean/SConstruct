import os
import string
import sys


# REMOVE THIS WHEN THE TOOLPATH-IMPORT PATCH IS CHECKED INTO SCONS.
# Add toolspec to sys.path so we can use those tools.
sys.path.append(Dir('#/toolspec').abspath)


SConsignFile()

Default(['build', 'tests'])

opts = Options('options.cache')
opts.AddOptions(
    BoolOption('dbg',    'Build with debugging enabled', 0),
    BoolOption('opt',    'Build with optimizations', 0),
    BoolOption('distcc', 'Enable compiling with distcc', 0),
    BoolOption('nowarn', 'Disable all warnings', 0),
    BoolOption('warningsAsErrors', 'Treat warnings as errors', 0),
    BoolOption('saveTemps', 'Save temporary files, such as preprocessor output', 0),
    PathOption('boostIncludes', 'Directory containing boost header files', '/usr/local/include/boost-1_31'),
    BoolOption('withCallStack', 'Enable CallStack support', 1))

# Create base environment.
env = Environment(ENV=os.environ, options=opts)

Help(opts.GenerateHelpText(env))
opts.Save('options.cache', env)

# Process platforms.
if env['PLATFORM'] == 'cygwin':
    env.Append(CPPDEFINES = ['WIN32', '_WIN32', 'NOMINMAX'],
               CPPPATH = ['#/third-party-cygwin/include'],
               LIBPATH = ['#/third-party-cygwin/lib'])

if env['PLATFORM'] == 'irix':
    env.Append(
        CPPPATH = string.split(os.environ['CPLUS_INCLUDE_PATH'], ':'),
        LIBPATH = string.split(os.environ['LIBRARY_PATH'], ':'),
        LIBS = ['m'])

# Process build options.
if env.get('dbg'):
    env.Append(CCFLAGS = ['-g'], CPPDEFINES=['DEBUG'])
if env.get('opt'):
    env.Append(CCFLAGS = ['-O2'], LINKFLAGS = ['-s'], CPPDEFINES=['NDEBUG'])
if env.get('distcc'):
    env['CC']  = ['$(', 'distcc', '$)', env['CC']]
    env['CXX'] = ['$(', 'distcc', '$)', env['CXX']]
if env.get('nowarn'):
    env.Append(CCFLAGS=['-w'])
else:
    if env['CC'] == 'gcc':
        env.Append(CCFLAGS=['-Wall'])
    elif env['CXX'] == 'g++':
        env.Append(CXXFLAGS=['-Wall'])
    if env['CXX'] == 'g++':
        env.Append(CXXFLAGS=['-Wno-non-virtual-dtor'])
if env.get('warningsAsErrors'):
    if env['CC'] == 'gcc':
        env.Append(CCFLAGS=['-Werror'])
    elif env['CXX'] == 'g++':
        env.Append(CXXFLAGS=['-Werror'])
if env['saveTemps']:
    env.Append(CCFLAGS=['-save-temps'])

# Autoconfiguration.
conf = env.Configure()
if env['withCallStack']:
    if conf.CheckHeader('execinfo.h'):
        env.Append(CPPDEFINES=['HAVE_EXECINFO_H'])
    if conf.CheckHeader('unwind.h'):
        env.Append(CPPDEFINES=['HAVE_UNWIND_H'])

Export('env')

# Process subdirectories.
# XXX Due to a bug in SCons, we have to do resources last.
# The bug is that if one subscript does an Export(), it overwrites imports in
# other scripts.
SConscript(dirs = ['src', 'tests', 'resources'])

if env['PLATFORM'] == 'cygwin':
    SConscript(dirs = ['third-party-cygwin'])
