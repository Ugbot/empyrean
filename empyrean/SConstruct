import sys
import os
import string
import SCons.Errors

SConsignFile()

Default('build')

_cache = {}
def CachedWhereIs(command):
    if command in _cache.keys():
        return _cache[command]

    where = WhereIs(command)
    if where:
        print "ParseConfig:", str(command), "found at", where
    else:
        print "ParseConfig:", str(command), "not found in PATH"
    _cache[command] = where
    return where


# Courtesy of Ben Scott
def ParseConfig(env, command, options):
    "Parses xxx-config style output for compilation directives"

    # Run the command
    where = CachedWhereIs(command)
    if not where:
        raise SCons.Errors.UserError, ('%s not found in PATH' % command)

    cmd = where + ' ' + string.join(options)
    params = string.split(os.popen(cmd).read())

    # Parse its output
    for arg in params:
        switch = arg[0:1]
        option = arg[1:2]
        if switch == '-':
            if option == 'I':
                env.Append(CPPPATH = [arg[2:]])
            elif option == 'L':
                env.Append(LIBPATH = [arg[2:]])
            elif option == 'l':
                env.Append(LIBS = [arg[2:]])
            elif arg[0:4] == '-Wl,':
                env.Append(LINKFLAGS = [arg])
            else:
                env.Append(CCFLAGS = [arg])
        else:
            # Must be a static library, add it to the libs
            # XXX think about this more...
            env.Append(LIBS = [arg])


def SetupAudiere(env):
    try:
        ParseConfig(env, 'audiere-config', ['--cxxflags', '--libs'])
    except SCons.Errors.UserError, e:
        env.Append(LIBS=['audiere'])

    if env['PLATFORM'] == 'cygwin':
        env.Append(CPPDEFINES = ['ADR_CALL=', 'ADR_DECL='])

def SetupCal3D(env):
    env.Append(CXXFLAGS=['-DCAL3D_API='], LIBS=['cal3d', 'm'])

def SetupCorona(env):
    try:
        ParseConfig(env, 'corona-config', ['--cxxflags', '--libs'])
    except SCons.Errors.UserError, e:
        env.Append(LIBS = ['corona', 'jpeg', 'png', 'z'])

    if env['PLATFORM'] == 'cygwin':
        env.Append(CPPDEFINES = ['COR_CALL='])

def SetupExpat(env):
    env.Append(LIBS = ['expat'])

def SetupGLText(env):
    if env['PLATFORM'] == 'cygwin':
        env.Append(CPPDEFINES = ['GLTEXT_CALL=', 'GLTEXT_DECL='])
    env.Append(LIBS = ['gltext', 'freetype', 'z'])

def SetupOpenGL(env):
    if env['PLATFORM'] == 'cygwin':
        env.Append(LIBS = ['glu32', 'opengl32'])
    else:
        env.Append(LIBS = ['GLU', 'GL'])

def SetupPHUI(env):
    env.Append(CPPPATH = ['#/src'],
               LIBPATH = ['#/src/phui'],
               LIBS = ['phui'])

def SetupPyrBase(env):
    env.Append(CPPPATH = ['#/src/base'],
               LIBPATH = ['#/src/base'],
               LIBS = ['base'])

def SetupNSPR(env):
    try:
        # Try using nspr-config first.
        ParseConfig(env, 'nspr-config', ['--cflags', '--libs'])
    except SCons.Errors.UserError, e:
        # @todo  make it only include /usr/mozilla...  on debian
        #        check uname's output?
        import os.path
        incpaths = ['/opt/mozilla/include/nspr', '/usr/include/mozilla/nspr',
                    '/usr/include/nspr']
        libpaths = ['/opt/mozilla/lib', '/usr/lib/mozilla']
        for p in incpaths:
            if os.path.exists(p):
                env.Append(CPPPATH=[p])
                break
        for p in libpaths:
            if os.path.exists(p):
                env.Append(LIBPATH=[p],LINKFLAGS=['-Wl,-rpath', p])
                break
        env.Append(LIBS=['nspr4', 'pthread'])

def SetupSDL(env):
    if env['PLATFORM'] == 'cygwin':
        env.Append(CPPPATH = '/usr/local/include/SDL',
                   CPPDEFINES = ['main=SDL_main', 'WIN32'],
                   CCFLAGS = ['-mwindows'],
                   LIBS = ['SDL', 'SDLmain'])
    else:
        ParseConfig(env, 'sdl-config', ['--cflags', '--libs'])

def SetupWxWindows(env):
    args = ['--cxxflags', '--libs']
    if env['PLATFORM'] != 'cygwin':
        args.append('--gl-libs')  # special case cygwin's inconsistency
    ParseConfig(env, 'wx-config', args)


# Initialize set of external dependencies.
TOOLS = {
    'Audiere'   : SetupAudiere,
    'Cal3D'     : SetupCal3D,
    'Corona'    : SetupCorona,
    'Expat'     : SetupExpat,
    'GLText'    : SetupGLText,
    'OpenGL'    : SetupOpenGL,
    'PHUI'      : SetupPHUI,
    'PyrBase'   : SetupPyrBase,
    'NSPR'      : SetupNSPR,
    'SDL'       : SetupSDL,
    'wxWindows' : SetupWxWindows }
Export('TOOLS')


opts = Options('options.cache')
opts.AddOptions(
    BoolOption('dbg',    'Build with debugging enabled', 0),
    BoolOption('opt',    'Build with optimizations', 0),
    BoolOption('distcc', 'Enable compiling with distcc', 0),
    BoolOption('nowarn', 'Disable all warnings', 0),
    BoolOption('warningsAsErrors', 'Treat warnings as errors', 0))

# Create base environment.
env = Environment(ENV = os.environ, options=opts)

Help(opts.GenerateHelpText(env))
opts.Save('options.cache', env)

# Process platforms.
if env['PLATFORM'] == 'cygwin':
    env.Append(CPPDEFINES = ['WIN32', '_WIN32', 'NOMINMAX'],
               CPPPATH = ['#/third-party-cygwin/include'],
               LIBPATH = ['#/third-party-cygwin/lib'])

if env['PLATFORM'] in ['cygwin', 'irix']:
    env['USE_EXTGL'] = 1
    env.Append(CCFLAGS = ['-DPYR_USE_EXTGL'])
else:
    env['USE_EXTGL'] = 0

if env['PLATFORM'] == 'irix':
    env.Append(
        CPPPATH = string.split(os.environ['CPLUS_INCLUDE_PATH'], ':'),
        LIBPATH = string.split(os.environ['LIBRARY_PATH'], ':'),
        LIBS = ['m'])

# Process build options.
if env.get('dbg'):
    env.Append(CCFLAGS = ['-g'], CPPDEFINES=['DEBUG', '_DEBUG'])
if env.get('opt'):
    env.Append(CCFLAGS = ['-O2'], LINKFLAGS = ['-s'], CPPDEFINES=['NDEBUG'])
if env.get('distcc'):
    env['CC']  = ['$(', 'distcc', '$)', env['CC']]
    env['CXX'] = ['$(', 'distcc', '$)', env['CXX']]
if env.get('nowarn'):
    env.Append(CCFLAGS=['-w'])
else:
    if env['CC'] == 'gcc':
        env.Append(CCFLAGS=['-Wall'])
    elif env['CXX'] == 'g++':
        env.Append(CXXFLAGS=['-Wall'])
    if env['CXX'] == 'g++':
        env.Append(CXXFLAGS=['-Wno-non-virtual-dtor'])
if env.get('warningsAsErrors'):
    if env['CC'] == 'gcc':
        env.Append(CCFLAGS=['-Werror'])
    elif env['CXX'] == 'g++':
        env.Append(CXXFLAGS=['-Werror'])

Export('env')

# Process subdirectories.
# XXX Due to a bug in SCons, we have to do resources last.
# The bug is that if one subscript does an Export(), it overwrites imports in
# other scripts.
SConscript(dirs = ['src', 'resources'])
