import sys
import os
import string
import SCons.Errors


Default('build')

# Courtesy of Ben Scott
def ParseConfig(env, command, options):
    "Parses xxx-config style output for compilation directives"

    # Run the command
    where = WhereIs(command)
    if not where:
        print "Looked for " + str(command) + " but could not find it in PATH"
        raise SCons.Errors.UserError, ('%s not found in PATH' % command)
    print "Found " + str(command) + ": " + where
    cmd = where + ' ' + string.join(options)
    params = string.split(os.popen(cmd).read())

    # Parse its output
    for arg in params:
        switch = arg[0:1]
        option = arg[1:2]
        if switch == '-':
            if option == 'I':
                env.Append(CPPPATH = [arg[2:]])
            elif option == 'L':
                env.Append(LIBPATH = [arg[2:]])
            elif option == 'l':
                env.Append(LIBS = [arg[2:]])
            elif arg[0:11] == '-Wl,-rpath,':
                env.Append(LINKFLAGS = [arg])
            else:
                env.Append(CXXFLAGS = [arg])
        else:
            # Must be a static library, add it to the libs
            env.Append(LIBS = [arg])

def SetupCal3D(env):
    env.Append(LIBS = ['cal3d'])

def SetupCorona(env):
    env.Append(LIBS = ['corona', 'png', 'z', 'jpeg'])

def SetupFreeType(env):
    ParseConfig(env, 'freetype-config', Split('--cflags --libs'))

def SetupGL(env):
    if sys.platform == 'cygwin':
        env.Append(LIBS = ['glu32', 'opengl32'])
    else:
        env.Append(LIBS = ['GLU', 'GL'])

def SetupNSPR(env):
    try:
        ParseConfig(env, 'nspr-config', Split('--cflags --libs'))
    except SCons.Errors.UserError, e:
        # @todo  make it only include /usr/mozilla...  on debian
        #        check uname's output?
        env.Append(
            CPPPATH = ['/usr/include/mozilla/nspr', '/usr/include/nspr'],
            LIBS = ['nspr4'])

def SetupSDL(env):
    if sys.platform == 'cygwin':
        env.Append(CPPPATH = '/usr/local/include/SDL',
                   LIBS = ['SDL', 'SDLmain'])
    else:
        ParseConfig(env, 'sdl-config', Split('--cflags --libs'))


Export('SetupCal3D SetupCorona SetupFreeType SetupGL SetupNSPR SetupSDL')

base_env = Environment(ENV = os.environ)
base_env.Append(CPPPATH = [Dir('src/base')],
                LIBPATH = [Dir('src/base')])

if sys.platform == 'cygwin':
    base_env.Append(CCFLAGS = ['-DWIN32', '-D_WIN32', '-DCYGWIN'],
                    CPPPATH = [Dir('third-party/include')],
                    LIBPATH = [Dir('third-party/lib')])

Export('base_env')

SConscript(dirs = ['src'])
