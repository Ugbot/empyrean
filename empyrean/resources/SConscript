import os
from os.path import join
from glob import glob
from types import ListType


EXTENSIONS = Split("""
    jpg
    JPG
    png
    ttf
    TXT
    obj
    mtl
    meta
    pyrmap
    wav
    mp3

    cal3d
    caf
    cfg
    cmf
    crf
    csf
    raw

    py

""")


base_env = Environment(ENV=os.environ)
base_env['BUILDERS']['ConvertImage'] = Builder(
    action='corconvert $SOURCE $TARGET')

root = Dir('.')
def Root():
    return root

def Here():
    return str(Dir('.').get_path(Root()))

def Install(env, files):
    if type(files) is not ListType:
        files = [files]
    for f in files:
        env.Install(env['DEST'].Dir(os.path.join(os.path.dirname(f), Here())),
                    f)

def ConvertImage(env, target, source):
    env.ConvertImage(env['DEST'].Dir(Here()).File(target), source)

def FindResources():
    result = []
    for e in EXTENSIONS:
        result.extend(glob('*.%s' % e))
    return result

def InstallResources(env):
    Install(env, FindResources())

Export('Install ConvertImage FindResources InstallResources')

tdirs = ['../build']
if base_env.get('PLATFORM') == 'cygwin':
    tdirs.append('../vc7/bin/Debug')
    tdirs.append('../vc7/bin/Release')


for t in map(Dir, tdirs):
    Default(t)
    env = base_env.Copy(DEST=t)
    Export('env')
    SConscript(dirs=['cutscene', 'editorrc', 'fonts', 'images', 'maps', 'models', 'music', 'sounds'])
